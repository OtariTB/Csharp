//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClassworkC
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class VynilStoreEntities : DbContext
    {
        public VynilStoreEntities()
            : base("name=VynilStoreEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Album> Albums { get; set; }
        public virtual DbSet<Artist> Artists { get; set; }
        public virtual DbSet<Genre> Genres { get; set; }
        public virtual DbSet<OrderDetail> OrderDetails { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<User> Users { get; set; }
    
        [DbFunction("VynilStoreEntities", "GetAlbumByArtist")]
        public virtual IQueryable<GetAlbumByArtist_Result> GetAlbumByArtist(Nullable<int> artist_ID)
        {
            var artist_IDParameter = artist_ID.HasValue ?
                new ObjectParameter("Artist_ID", artist_ID) :
                new ObjectParameter("Artist_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAlbumByArtist_Result>("[VynilStoreEntities].[GetAlbumByArtist](@Artist_ID)", artist_IDParameter);
        }
    
        public virtual int AddAlbum(string title, Nullable<System.DateTime> releaseDate, Nullable<decimal> price, Nullable<int> inStock, Nullable<int> artist_ID, Nullable<int> genre_ID)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var releaseDateParameter = releaseDate.HasValue ?
                new ObjectParameter("ReleaseDate", releaseDate) :
                new ObjectParameter("ReleaseDate", typeof(System.DateTime));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var inStockParameter = inStock.HasValue ?
                new ObjectParameter("inStock", inStock) :
                new ObjectParameter("inStock", typeof(int));
    
            var artist_IDParameter = artist_ID.HasValue ?
                new ObjectParameter("Artist_ID", artist_ID) :
                new ObjectParameter("Artist_ID", typeof(int));
    
            var genre_IDParameter = genre_ID.HasValue ?
                new ObjectParameter("Genre_ID", genre_ID) :
                new ObjectParameter("Genre_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddAlbum", titleParameter, releaseDateParameter, priceParameter, inStockParameter, artist_IDParameter, genre_IDParameter);
        }
    
        public virtual ObjectResult<AlbumQuantity_Result> AlbumQuantity(Nullable<int> instock)
        {
            var instockParameter = instock.HasValue ?
                new ObjectParameter("instock", instock) :
                new ObjectParameter("instock", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AlbumQuantity_Result>("AlbumQuantity", instockParameter);
        }
    
        public virtual int DeleteAlbum(Nullable<int> album_ID)
        {
            var album_IDParameter = album_ID.HasValue ?
                new ObjectParameter("Album_ID", album_ID) :
                new ObjectParameter("Album_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAlbum", album_IDParameter);
        }
    
        public virtual ObjectResult<FilterAlbums_Result> FilterAlbums(Nullable<int> genre_ID, Nullable<int> artist_ID, Nullable<decimal> minPrice, Nullable<decimal> maxPrice)
        {
            var genre_IDParameter = genre_ID.HasValue ?
                new ObjectParameter("Genre_ID", genre_ID) :
                new ObjectParameter("Genre_ID", typeof(int));
    
            var artist_IDParameter = artist_ID.HasValue ?
                new ObjectParameter("Artist_ID", artist_ID) :
                new ObjectParameter("Artist_ID", typeof(int));
    
            var minPriceParameter = minPrice.HasValue ?
                new ObjectParameter("MinPrice", minPrice) :
                new ObjectParameter("MinPrice", typeof(decimal));
    
            var maxPriceParameter = maxPrice.HasValue ?
                new ObjectParameter("MaxPrice", maxPrice) :
                new ObjectParameter("MaxPrice", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FilterAlbums_Result>("FilterAlbums", genre_IDParameter, artist_IDParameter, minPriceParameter, maxPriceParameter);
        }
    
        public virtual ObjectResult<GetAlbums_Result> GetAlbums()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAlbums_Result>("GetAlbums");
        }
    }
}
